</p><div class="ptx" lang="en-US"><script language="javascript">var x=navigator.platform.indexOf("Win32")!=-1;var y="<p style=\"margin-bottom:-0.9ex;\"><font face=\"Symbol\" size=\"5\">&aelig;</font></p><p style=\"margin-top:-0.9ex;margin-bottom:-0.9ex\"><font face=\"Symbol\" size=\"5\">&ccedil;</font></p><p style=\"margin-top:-0.9ex\"><font face=\"Symbol\" size=\"5\">&egrave;</font></p>";var z="<p style=\"margin-bottom:-0.9ex;\"><font face=\"Symbol\" size=\"5\">&ouml;</font></p><p style=\"margin-top:-0.9ex;margin-bottom:-0.9ex;\"><font face=\"Symbol\" size=\"5\">&divide;</font></p><p style=\"margin-top:-0.9ex;\"><font face=\"Symbol\" size=\"5\">&oslash;</font></p>";var u="<p style=\"margin-bottom:-0.9ex;\">⎛</p><p style=\"margin-top:-0.9ex;margin-bottom:-0.9ex;\">⎜</p><p style=\"margin-top:-0.9ex;\">⎝</p>";var v="<p style=\"margin-bottom:-0.9ex;\">⎞</p><p style=\"margin-top:-0.9ex;margin-bottom:-0.9ex;\">⎟</p><p style=\"margin-top:-0.9ex;\">⎠</p>";</script><span lang="en-us"><p>When John studied the timed automaton, he met the problem about how to trigger the machine. With the problem deeply studied, he found that it can be ascribed to the clock constraints of the timed automaton. The timed automation in question is described below:</p><p>The clock variables, or simply clocks, are variables whose values are integers. Of course, time passes at the same rate for all clocks, and any clock can be reset to zero. John uses <i>C</i> to denote the finite set of clocks, and defines the clock constraints for <i>C</i> as follows:</p><ol><li>All inequalities of the form <i>t</i> <code>#</code> <i>c</i> or <i>c</i> <code>#</code> <i>t</i> are clock constraints, where <i>t</i> is a clock, <code>#</code> is either &lt; or ≤, and <i>c</i> is an integer.</li><li>If <i>A</i><sub>1</sub> and <i>A</i><sub>2</sub> are clock constraints, then <i>A</i><sub>1</sub> ∧ <i>A</i><sub>2</sub> is a clock constraint.</li></ol><p>John notes that a clock constraint can define several regions in some multidimensional space. He wants to know such regions, so he defines the clock zones recursively as follows.</p><p>For simplicity, he let <i>C</i><sub>0</sub> = <i>C</i> ∪ {<i>x</i><sub>0</sub>}, where <i>x</i><sub>0</sub> is a reference clock whose value is always 0. The clock zone <i>A</i> can be described by a Difference Bound Matrix <i>D</i> (called a <i>DBM</i>) which is a matrix (<i>D<sub>ij</sub></i>) of size |<i>C</i><sub>0</sub>| &times; |<i>C</i><sub>0</sub>|. Each <i>D<sub>ij</sub></i> has the form (<i>d<sub>ij</sub></i>, <code>#</code>), where <i>d<sub>ij</sub></i> ∈ <i>Z</i> ∪ {<code>$</code>}, <code>#</code> ∈ {&lt;, ≤}. The value of <i>D<sub>ij</sub></i> can be evaluated in the following form:</p><p>For every inequality <i>x<sub>i</i></sub> − <i>x<sub>j</sub></i> <code>#</code> <i>d<sub>ij</sub></i> in clock zone <i>A</i>, let <i>D<sub>ij</sub></i> = (<i>d<sub>ij</sub></i>, <code>#</code>), where <i>x<sub>i</sub></i> and <i>x<sub>j</sub></i> are two clocks. If the bound of <i>x</i><sub><i>i</i></sub> − <i>x<sub>j</sub></i> for <i>x</i><sub><i>i</i></sub> and <i>x<sub>j</sub></i> is unknown, let <i>D<sub>ij</sub></i> = (<code>$</code>, &lt;).</p><p>For example, DBM of the clock zone given by <i>x</i><sub>1</sub> − <i>x</i><sub>2</sub> &lt; 2 ∧ 0 &lt; <i>x</i><sub>2</sub> ≤ 2 ∧ 1 ≤ <i>x</i><sub>1</sub> is shown below:</p><div align="center"><table border="0" width="250" id="table2"><tr><td rowspan="3" align="right" valign="middle"><script language="javascript">document.write(x?y:u);</script></td><td align="center" width="26%">(0, ≤)</td><td align="center" width="26%">(−1, ≤)</td><td align="center" width="26%">(0, &lt;)</td><td rowspan="3" valign="middle"><script language="javascript">document.write(x?z:v);</script></td></tr><tr><td align="center" width="26%">(4, &lt;)</td><td align="center" width="26%">(0, ≤)</td><td align="center" width="26%">(2, &lt;)</td></tr><tr><td align="center" width="26%">(2, ≤)</td><td align="center" width="26%">(1, &lt;)</td><td align="center" width="26%">(0, ≤)</td></tr></table></div><p>The representation of a clock zone by a DBM is not unique. In this example, there are some implied constraints that are not reflected in the DBM. Since <i>x</i><sub>1</sub> − <i>x</i><sub>2</sub> &lt; 2 and <i>x</i><sub>2</sub> ≤ 2, it must be the case <i>x</i><sub>1</sub> &lt; 4. Since <i>x</i><sub>0</sub> = 0, the original <i>D</i><sub>10</sub> = (<code>$</code>, &lt;) can be changed into <i>D</i><sub>10</sub> = (4, &lt;). Such adjusting operation is called the tighten operation.</p><p>Now John wants to do the similar adjusting operations of difference bounds for all clocks <i>x<sub>i</sub></i> and <i>x<sub>j</sub></i> until further application of this tighten operation does not change the matrix. John obtains the following new canonical difference bound matrix:</p><div align="center"><table border="0" width="250" id="table1"><tr><td rowspan="3" align="right" valign="middle"><script language="javascript">document.write(x?y:u);</script></td><td align="center" width="26%">(0, ≤)</td><td align="center" width="26%">(−1, ≤)</td><td align="center" width="26%">(0, &lt;)</td><td rowspan="3" valign="middle"><script language="javascript">document.write(x?z:v);</script></td></tr><tr><td align="center" width="26%">(4, &lt;)</td><td align="center" width="26%">(0, ≤)</td><td align="center" width="26%">(2, &lt;)</td></tr><tr><td align="center" width="26%">(2, ≤)</td><td align="center" width="26%">(1, &lt;)</td><td align="center" width="26%">(0, ≤)</td></tr></table></div><p>Note that some clock zone may contain contrary conditions and has not canonical difference bound matrix.</p><p>But John can not obtain a canonical difference bound matrix for a complex clock zone. He asks for your help.</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>The first line of the input file is a single integer <i>T</i> (1 &le; <i>T</i> &le; 20), which is the number of test cases you must process, followed by <i>T</i> test cases:</p><p>Each test case consists of several lines. Four integers <i>i</i>, <i>j</i>, <i>d</i> and <i>r</i> are given on each line, representing a constraint <i>x<sub>i</sub></i> &minus; <i>x<sub>j</sub></i> &lt; <i>d</i> or <i>x<sub>i</sub></i> &minus; <i>x<sub>j</sub></i> &le; <i>d</i> (0 &le; <i>i</i>, <i>j</i> &le; <i>m</i>, &minus;10000 &lt; <i>d</i> &lt; 10000). If <i>r</i> = 0, then this line represents an inequality in the form of <i>x<sub>i</sub></i> &minus; <i>x<sub>j</sub></i> &lt; <i>d</i>, otherwise it represents an inequality in the form of <i>x<sub>i</sub></i> &minus; <i>x<sub>j</sub></i> &le; <i>d</i>. The maximal index <i>m</i> of clocks indicates that the indexes of the clocks are 0, 1, &hellip;, <i>m</i>, (1 &le; <i>m</i> &le; 100). Note that you have to get the value of <i>m</i> by yourself.</p><p>A symbol <code>#</code> given on a single line indicates the end of a test case.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><span lang="en-us"><p>For each test case, first output &ldquo;<code>Case #:</code>&rdquo; on a single line, where <code>#</code> is the case number starting from 1. Print a blank line after each test case.</p><p>For each test case, output the description of the canonical difference bound matrix. If it doesn&rsquo;t have a canonical difference bound matrix, print &ldquo;<code>Canonical DBM does not exist.</code>&rdquo; (without quotes); If it has a such canonical difference bound matrix, print the matrix in the format as indicated in the sample output. Every element <i>D<sub>ij</sub></i> of the matrix should be written in the form (<i>d<sub>ij</sub></i>, <code>#</code>), where <code>#</code> is either <code>&lt;</code> or <code>&lt;=</code>. If the bound of <i>x<sub>i</sub></i> &minus; <i>x<sub>j</sub></i> for <i>x<sub>i</sub></i> and <i>x<sub>j</sub></i> is unknown, print <code>($,&lt;)</code> at the position (<i>i</i>, <i>j</i>). Two consecutive elements on each row should be separated by a single space.</p></span></div><p class="pst">Sample Input</p><pre class="sio">1
1 2 2 0
0 2 0 0
2 0 2 1
0 1 -1 1
#</pre><p class="pst">Sample Output</p><pre class="sio">Case 1:
(0,<=) (-1,<=) (0,<)
(4,<) (0,<=) (2,<)
(2,<=) (1,<=) (0,<=)
</pre><p class="pst">