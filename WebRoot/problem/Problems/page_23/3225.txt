</p><div class="ptx" lang="en-US"><span lang="en-us"><p>LogLoader, Inc. is a company specialized in providing products for analyzing logs. While Ikki is working on graduation design, he is also engaged in an internship at LogLoader. Among his tasks, one is to write a module for manipulating time intervals, which have confused him a lot. Now he badly needs your help.</p><p>In discrete mathematics, you have studied several basic set operations, namely union, intersection, relative complementation and symmetric difference, which naturally apply to the specialization of sets as intervals.. For your quick reference they are summarized in the table below:</p><blockquote><table border="1" style="border-collapse: collapse" bordercolor="#000000" id="table1"><tr><th>Operation</th><th>Notation</th><th><p align="left">Definition</p></th></tr><tr><td align="center">Union</td><td align="center"><i>A</i> ∪ <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> or <i>x</i> ∈ <i>B</i>}</td></tr><tr><td align="center">Intersection</td><td align="center"><i>A</i> ∩ <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> and <i>x</i> ∈ <i>B</i>}</td></tr><tr><td align="center">Relative complementation</td><td align="center"><i>A</i> − <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> but <script lang="javascript">document.write(navigator.userAgent.indexOf("MSIE 6.0")!=-1?"not <i>x</i> &isin;":"<i>x</i> &notin;");</script><i> B</i>}</td></tr><tr><td align="right">Symmetric difference</td><td align="center"><i>A</i> ⊕ <i>B</i></td><td>(<i>A</i> − <i>B</i>) ∪ (<i>B</i> − <i>A</i>)</td></tr></table></blockquote><p>Ikki has abstracted the interval operations emerging from his job as a tiny programming language. He wants you to implement an interpreter for him. The language maintains a set <i>S</i>, which starts out empty and is modified as specified by the following commands:</p><blockquote><table border="1" style="border-collapse: collapse" bordercolor="#000000" id="table2"><tr><th>Command</th><th>Semantics</th></tr><tr><td align="center"><code>U</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ∪ <i>T</i></td></tr><tr><td align="center"><code>I</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ∩ <i>T</i></td></tr><tr><td align="center"><code>D</code> <i>T</i></td><td><i>S</i> ← <i>S</i> − <i>T</i></td></tr><tr><td align="center"><code>C</code> <i>T</i></td><td><i>S</i> ← <i>T</i> − <i>S</i></td></tr><tr><td align="center"><code>S</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ⊕ <i>T</i></td></tr></table></blockquote></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains exactly one test case, which consists of between 0 and 65,535 (inclusive) commands of the language. Each command occupies a single line and appears like</p><blockquote><p><code>X</code> <i>T</i></p></blockquote><p>where <code>X</code> is one of ‘<code>U</code>’, ‘<code>I</code>’, ‘<code>D</code>’, ‘<code>C</code>’ and ‘<code>S</code>’ and <i>T</i> is an interval in one of the forms <code>(</code><i>a</i><code>,</code><i>b</i><code>)</code>, <code>(</code><i>a</i><code>,</code><i>b</i><code>]</code>, <code>[</code><i>a</i><code>,</code><i>b</i><code>)</code> and <code>[</code><i>a</i><code>,</code><i>b</i><code>]</code> (<i>a</i>, <i>b</i> ∈ <i><b>Z</b></i>, 0 ≤ <i>a</i> ≤ <i>b</i> ≤ 65,535), which take their usual meanings. The commands are executed in the order they appear in the input.</p><p>End of file (EOF) indicates the end of input.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><span lang="en-us"><p>Output the set <i>S</i> as it is after the last command is executed as the union of a minimal collection of disjoint intervals. The intervals should be printed on one line separated by single spaces and appear in increasing order of their endpoints. If <i>S</i> is empty, just print “<code>empty set</code>” and nothing else.</p></span></div><p class="pst">Sample Input</p><pre class="sio">U [1,5]
D [3,3]
S [2,4]
C (1,5)
I (2,3]</pre><p class="pst">Sample Output</p><pre class="sio">(2,3)</pre><p class="pst">