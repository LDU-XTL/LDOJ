</p><div class="ptx" lang="en-US"><span lang="en-us"><p>A typical assignment for computer science students is to build a compiler that compiles a simple language for a RISC architecture, which, when it goes to extremes, could become: evaluating an expression on an ultimate RISC architecture &ndash; a One Instruction Set Computer (OISC).</p><p><b>Target Architecture</b></p><p>The target architecture has a memory consisting of 65,536 16-bit words and a 16-bit instruction pointer IP. As suggested by its name, it has only one instruction: subtract-and-branch-if-non-negative. In each instruction cycle, the processor reads three consecutive words <i>a</i>, <i>b</i> and <i>c</i> at the address stored in IP, then subtracts <i>a</i> from the word at address <i>b</i>. If the result is non-negative, IP is set to <i>c</i>, otherwise it is increased by three. (Here by &ldquo;subtract&rdquo; and &ldquo;non-negative&rdquo; we mean 16-bit signed integer arithmetic.) When IP is greater than or equal to 65,534, the processor halts.</p><p>A program is executed as follows:</p><ol><li>The program is loaded into memory starting from address 0.</li><li>A word-sized input parameter is placed at address 0, overwriting the program&rsquo;s first word.</li><li>IP is set to 0.</li><li>The processor starts execution until it halts.</li><li>The word at address 0 is considered as the output.</li></ol><p><b>