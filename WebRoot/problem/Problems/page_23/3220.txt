</p><div class="ptx" lang="en-US"><span lang="en-us"><p><i>Context-free grammars</i> (CFG) are a powerful method of describing languages. The syntax of most programming languages including C, C++, Java and Pascal, compilers for which are provided in this online judge system, is specified using CFGs.</p><p>In this problem, we work with CFGs in a generative manner. A CFG consists of a set of <i>production rules</i> for transforming strings. Every rule is of the form</p><blockquote><p><i>V</i> → <i>w</i></p></blockquote><p>where <i>V</i> is a <i>symbol</i> and <i>w</i> is a string of symbols. Symbols are classified into <i>terminals</i> and <i>variables</i>. In the rule above, <i>V</i> is restricted to be a variable, while <i>w</i> can contain terminals and/or variables. The term “context-free” expresses the fact that <i>V</i> can always be replaced by <i>w</i>, regardless of the context in which it occurs. Among variables, exactly one of them is designated as the <i>start variable</i>. To generate a string using the CFG, one begins with a string consisting of only a single start variable, and then applies the rules successively and arbitrarily to rewrite the string until only terminals are left.</p><p>For example, the alphabet of terminals consists of <code>z</code>, the start variable is <i>S</i> and we we have the following rules:</p><ol><li><i>S</i> → <i>CB</i></li><li><i>S</i> → <i>ZZ</i></li><li><i>A</i> → <i>CB</i></li><li><i>A</i> → <i>ZZ</i></li><li><i>B</i> → <i>ZZ</i></li><li><i>C</i> → <i>BA</i></li><li><i>Z</i> → <code>z</code></li></ol><p>then we start with <i>S</i>, and we can choose a rule to apply to it. If we choose rule 1, we replace <i>S</i> with <i>CB</i> and obtain the string <i>CB</i>. If we then choose rule 6, we replace <i>C</i> with <i>BA</i> and obtain the string <i>BAB</i>. If we now choose rule 4, we replace <i>A</i> with <i>ZZ</i> and obtain the string <i>BZZB</i>. We can write this series of choice more briefly, using symbols: <i>S</i> ⇒ <i>CB</i> ⇒ <i>BAB</i> ⇒ <i>BZZB</i> ⇒ <i>ZZZZB</i> ⇒ <i>ZZZZZZ</i> ⇒ <code>z</code><i>ZZZZZ</i> ⇒ <code>zz</code><i>ZZZZ</i> ⇒ <code>zzz</code><i>ZZZ</i> ⇒ <code>zzzz</code><i>ZZ</i> ⇒ <code>zzzzz</code><i>Z</i> ⇒ <code>zzzzzz</code>. The language of the grammar is the set of all strings consisting of twice an odd number of <code>z</code>’s.</p><p>Given a CFG and some strings, determine whether each string belongs to the language of the grammar.</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>To make everything brief, we group together all rules with the same variable to the left of “→” &nbsp;in the CFG. For example, we group the following three rules</p><blockquote><p><i>S</i> → <i>u</i><br><i>S</i> → <i>v</i><br><i>S</i> → <i>w</i></p></blockquote><p>into</p><blockquote><p><i>S</i> → <i>u</i> | <i>v</i> | <i>w</i></p></blockquote><p>And the CFG is given in a special form called <i>Chomsky normal form</i> (CNF). A CFG in CNF only contains rules of the form</p><blockquote><p><i>A</i> → <i>BC</i><br><i>A</i> → <i>a</i></p></blockquote><p>where <i>a</i> is any terminal and <i>A</i>, <i>B</i>, and <i>C</i> are any variables except that <i>B</i> and <i>C</i> may not be the start variable. CNF also permits the rule <i>S</i> → <i>ε</i>, where <i>S</i> is the start variable and <i>ε</i> represents the empty string, so that the CFG can generate the empty string. We ignore this case just for this problem.</p><p>The input contains exactly one CFG in CNF and no more than 50 strings. We use single lowercase letters as terminals and single uppercase letters as variables. <i>S</i> will always be the start variable. The CFG is given in several lines. A line contains all production rules for one variable grouped together as described above. “→” will be replaced by “<code>-&gt;</code>”. Not all possible variables are involved in the CFG, but every involved one will has at least one production rule. The CFG ends with a line containing only a single “<code>#</code>”. Following the CFG come the strings, one on a separate line. The input ends where no more strings can be found. Spaces and blank lines will not show up in the input.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><span lang="en-us"><p>For each string, output exactly one line. If the string belongs to the language of the given CFG, the line should read “<code>YES</code>” (without quotes); otherwise it should read “<code>NO</code>” (without quotes).</p></span></div><p class="pst">Sample Input</p><pre class="sio">S->CB|ZZ
A->CB|ZZ
B->ZZ
C->BA
Z->z
#
zzzzzz
z
a</pre><p class="pst">Sample Output</p><pre class="sio">YES
NO
NO</pre><p class="pst">