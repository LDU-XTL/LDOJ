</p><div class="ptx" lang="en-US"><p>Nick has recently learned about a special kind of sets called artinian sets or simply artinals. These sets have the advantage of possessing a finite representation, so they can be processed by a computer. However, their formal definition is a bit complicated. Here it is:</p><ul><li>The only <i>artinal of height</i> &le; 0 is the empty set &empty;.</li><li><i>Artinals of height</i> &le; <i>n</i> are exactly the finite sets composed of artinals of height &le; <i>n</i> &minus; 1. Here <i>n</i> &ge; 1 is an arbitrary natural number.</li><li>Finally, <i>A</i> is an <i>artinal</i> if A is an artinal of height &le; <i>n</i> for at least one integer <i>n</i>.</li><li>The set of all artinals is denoted by <i>U</i>.</li></ul>It is immediate from the definition that an artinal of height &le; <i>n</i> is also an artinal of height &le; <i>n</i> + 1. Thus for any artinal <i>A</i> we can define its <i>height</i> <i>h</i>(<i>A</i>) as the minimal integer <i>n</i> such that <i>A</i> is an artinal of height &le; <i>n</i>. An artinal of height <i>n</i> is also called an <i>n-artinal</i>. There were two other definitions which took a lot of time to understand. They are the definition of <i>canonical order</i> on <i>U</i> (denoted by &lt;) and the definition of <i>canonical form</i> of an artinal:<ul><li>The canonical form of an artinal <i>A</i> of height &le; <i>n</i> is a representation <i>A</i> = {<i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, &hellip;, <i>A<sub>s</sub></i>} where <i>A<sub>i</sub></i> are artinals of height &le; <i>n</i> &minus; 1 and <i>A</i><sub>1</sub> &lt; <i>A</i><sub>2</sub> &lt; &hellip; &lt; <i>A<sub>s</sub></i>.</li><li>If <i>A</i> = { <i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, &hellip;, <i>A<sub>s</sub></i>} and <i>B</i> = { <i>B</i><sub>1</sub>, <i>B</i><sub>2</sub> , &hellip;, <i>B<sub>t</sub></i>} are two artinals of height &le; <i>n</i> written in the canonical form, then we put <i>A</i> &lt; <i>B</i> iff there exists an integer <i>k</i>, 1 &le; <i>k</i> &le; min(<i>s</i> + 1, <i>t</i>), such that <i>A<sub>j</sub></i> = <i>B<sub>j</sub></i> for all integer <i>j</i> such that 1 &le; <i>j</i> &lt; <i>k</i> and either <i>k</i> = <i>s</i> + 1 or <i>A<sub>k</sub></i> &lt; <i>B<sub>k</sub></i>.</li></ul>Now we can define for any artinal <i>A</i> its canonical representation. It is a string repr(<i>A</i>) composed of characters &lsquo;{&rsquo;, &lsquo;}&rsquo; and &lsquo;,&rsquo; defined in the following way: repr(&empty;) = &ldquo;{}&rdquo;, and if <i>A</i> is an artinal with canonical form <i>A</i> = {<i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, &hellip;, <i>A<sub>s</sub></i>}, then repr(A) = &ldquo;{&rdquo; + repr(<i>A</i><sub>1</sub>) + &ldquo;,&rdquo; + &hellip; + &ldquo;,&rdquo; + repr(<i>A<sub>s</sub></i>) + &ldquo;}&rdquo;. The canonical representation is often rather lengthy. In order to shorten it, the following definition is introduced. For any integer <i>n</i> &ge; 0 an artinal <u><i>n</i></u> (called <i>finite ordinal</i>) is defined by induction on <i>n</i>: <u>0</u> := &empty; and <u><i>n</i> + 1</u> := {<u><i>n</i></u>} &cup; <u><i>n</i></u> for all <i>n</i> &ge; 0. Then we can define the <i>reduced canonical representation</i> of an artinal in the following way: We take the canonical representation of this artinal and substitute <i>n</i> for any occurrence of the ordinal <u><i>n</i></u> that is not contained in an occurrence of <i>m</i> for some <i>m</i> &gt; <i>n</i>.</p><p>Then some operations on artinals are defined. These operations (from highest priority to lowest) are:</p><ul><li>Unary intersection &cap; : for a non-empty artinal <i>A</i> = {<i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, &hellip;, <i>A<sub>s</sub></i>} put &cap;<i>A</i> := <i>A</i><sub>1</sub> &cap; <i>A</i><sub>2</sub> &cap; &hellip; &cap; <i>A<sub>s</sub></i>.</li><li>Unary union &cup;: for any artinal <i>A</i> = {<i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, &hellip;, <i>A<sub>s</sub></i>} put &cup;<i>A</i> := <i>A</i><sub>1</sub> &cup; <i>A</i><sub>2</sub> &cup; &hellip; &cup; <i>A<sub>s</sub></i>; &cup;&empty; := &empty;.</li><li>Binary intersection &cap;: <i>A</i> &cap; <i>B</i> := {<i>x</i> : <i>x</i> &isin; <i>A</i> &and; <i>x</i> &isin; <i>B</i>}.</li><li>Binary union &cup;: <i>A</i> &cup; <i>B</i> := {<i>x</i> : <i>x</i> &isin; <i>A</i> &or; x &isin; <i>B</i>}.</li><li>Binary difference &minus;: <i>A</i> &minus; <i>B</i> := {<i>x</i> &isin; <i>A</i> : <i>x</i> &notin; <i>B</i>}.</li><li>Binary symmetrical difference &oplus;: <i>A</i> &oplus; <i>B</i> := (<i>A</i> &minus; <i>B</i>) &cup; (<i>B</i> &minus; <i>A</i>).</li></ul>Besides, some relations between artinals are defined:<ul><li>Equality = and inequality &ne;.</li><li>Inclusion &sub; and &sup;: (<i>A</i> &sub; <i>B</i>) &hArr; (<i>B</i> &sup; <i>A</i>) &hArr; (<i>x</i> &isin; <i>A</i> &rArr; <i>x</i> &isin; <i>B</i>).</li><li>Element relations &isin; and &ni;: <i>B</i> &isin; <i>A</i> (equivalent to <i>A</i> &ni; <i>B</i>) means that <i>B</i> is an element of <i>A</i>.</li><li>Canonical order relations &lt;, &gt;, &le;, &ge; described above (as usual, <i>A</i> &le; <i>B</i> &hArr; ((<i>A</i> &lt; <i>B</i>) &or; (<i>A</i> = <i>B</i>)), <i>A</i> &gt; <i>B</i> &hArr; <i>B</i> &lt; <i>A</i> and <i>A</i> &ge; <i>B</i> &hArr; <i>B</i> &le; <i>A</i>).</li></ul><p>Now Nick wants you to write a program that would make some computations with artinals. This program will consist of several operators, each on a separate line. There are five kinds of operators:</p><ul><li>Assignment operator &lt;<i>ident</i>&gt; &ldquo;:=&rdquo; &lt;<i>expr</i>&gt; &mdash; sets variable &lt;<i>ident</i>&gt; to the value of expression &lt;<i>expr</i>&gt;.</li><li>Evaluate operator &ldquo;!&rdquo;&lt;<i>expr</i>&gt; &mdash; evaluates &lt;<i>expr</i>&gt and prints the result in reduced canonical representation on a separate line of output.</li><li>Check condition operator &ldquo;?&rdquo;&lt;<i>expr</i>&gt;&lt;<i>relation</i>&gt;&lt;<i>expr</i>&gt; &mdash; checks the condition and outputs either &ldquo;FALSE&rdquo; or &ldquo;TRUE&rdquo; on a separate line of output.</li><li>Comment operator &ldquo;#&rdquo;&lt;<i>any_characters</i>&gt; &mdash; the entire line is copied to the output.<li>Empty operator &mdash; an empty line (i.e. line consisting only of blank characters) &mdash; does nothing.</li></ul><p>The following definitions are used:<br>&lt;<i>ident</i>&gt; ::= &lt;<i>alpha</i>&gt;{&lt;<i>alpha</i>&gt;}<br>&lt;<i>alpha</i>&gt; ::= &lt;<i>letter</i>&gt;|&lt;<i>digit</i>&gt;|&ldquo;_&rdquo;<br>&lt;<i>digit</i>&gt; ::= &ldquo;0&rdquo;|&ldquo;1&rdquo;|&hellip;|&ldquo;9&rdquo;<br>&lt;<i>letter</i>&gt; ::= &ldquo;A&rdquo;|&ldquo;B&rdquo;|&hellip;|&ldquo;Z&rdquo;|&ldquo;a&rdquo;|&ldquo;b&rdquo;|&hellip;|&ldquo;z&rdquo;<br>&lt;<i>expr</i>&gt; ::= &ldquo;{&rdquo;[&lt;<i>expr</i>&gt;{&ldquo;,&rdquo;&lt;<i>expr</i>&gt;}]&ldquo;}&rdquo;|&lt;<i>ident</i>&gt;|&lt;<i>expr</i>&gt;&lt;<i>binop</i>&gt;&lt;<i>expr</i>&gt;|&lt;<i>unop</i>&gt;&lt;<i>expr</i>&gt;|&ldquo;(&rdquo;&lt;<i>expr</i>&gt;&ldquo;)&rdquo;<br>&lt;<i>binop</i>&gt; ::= &ldquo;+&rdquo;|&ldquo;*&rdquo;|&ldquo;&minus;&rdquo;|&ldquo;^&rdquo;<br>&lt;<i>unop</i>&gt; ::= &ldquo;+&rdquo;|&ldquo;*&rdquo;<br>&lt;<i>relation</i>&gt; ::= &ldquo;&lt;&rdquo;|&ldquo;&gt;&rdquo;|&ldquo;=&rdquo;|&ldquo;&lt;=&rdquo;|&ldquo;&gt;=&rdquo;|&ldquo;&lt;&gt;&rdquo;|&ldquo;&minus;&gt;&rdquo;|&ldquo;&lt;&minus;&rdquo;|&ldquo;&lt;&lt;&rdquo;|&ldquo;&gt;&gt;&rdquo;<br>The binary operators (in the order they were listed in the definition of &lt;<i>binop</i>&gt;) correspond to &cup;, &cap;, &minus; and &oplus;; the unary operators correspond to &cup; and &cap;; finally, the relations correspond to &lt;, &gt;, =, &le;, &ge;, &ne;, &isin;, &ni;, &sub;, &sup;. Parentheses &ldquo;(&rdquo; and &ldquo;)&rdquo; are used to change the precedence of operations as usual. All tokens of input (except several &lt;<i>alpha</i>&gt; forming a single &lt;<i>ident</i>&gt;) can be separated by an arbitrary number of blank characters (i.e. spaces and tabulation characters).<p></p>Besides, before the execution of the program the variables with names that are decimal representations (without leading zeros) of non-negative integers <i>n</i> &le; 2<sup>9</sup> are set to the finite ordinals <u><i>n</i></u>. All other variables are initialized with &empty;. All identifiers are case-sensitive.</p></div><p class="pst">Input</p><div class="ptx" lang="en-US">The input file consists of not more than one hundred lines each containing a single operator. No line is longer than 254 characters. </div><p class="pst">Output</p><div class="ptx" lang="en-US">Produce one line of output for each &ldquo;?&rdquo;, &ldquo;!&rdquo; and &ldquo;#&rdquo; operator as described above. It is guaranteed that there will be no &ldquo;run-time errors&rdquo; (e.g. unary &cap; will never be applied to an empty set).</div><p class="pst">Sample Input</p><pre class="sio">  !2    + 2
!2*2
!3-4
 #  More examples!

00 := 5+3
! 3-5
! 00
! (5-3)*(5+3)
? 3>9
A := {2,3,9}
B := {1,7}
! A^ B
! +239
? 2->00
? 2<<00
? A>>B
! {{{},{{}},{}},B,{A},{B},{A,B}}+B
</pre><p class="pst">Sample Output</p><pre class="sio">2 
2 
0 
 #  More examples!
0 
5 
{3,4}
FALSE 
{1,2,3,7,9}
238 
TRUE 
TRUE 
FALSE 
{1,2,7,{1,7},{{1,7}},{{1,7},{2,3,9}},{{2,3,9}}}</pre><p class="pst">