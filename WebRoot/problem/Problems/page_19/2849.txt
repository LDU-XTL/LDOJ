</p><div class="ptx" lang="en-US"><span lang="en-us"><P>brainf*ck is the ungodly creation of Urban Mller, whose goal was apparently to create a Turing-complete language for which he could write the smallest compiler ever. http://en.wikipedia.org defines it as &ldquo;a computer programming language designed to challenge and amuse programmers, and is not suitable for practical use. Its name has been variously euphemized, as in brainf*ck.&rdquo; <P>A brainf*ck program has an implicit byte pointer, called &ldquo;the pointer&rdquo;, which is free to move around within an array of 32768 bytes, initially all set to zero. The pointer itself is initialized to point to the beginning of this array. <P>The brainf*ck programming language consists of seven commands, each of which is represented as a single character. Note: &ldquo;Industry standard&rdquo; brainf*ck actually has eight commands, but for the purposes of this problem one command was intentionally omitted. <P><BR><DIV ALIGN=CENTER><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>COMMAND </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>OPERATION </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>&gt;</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing a pointer value of 32767 </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 0. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>&lt;</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing a pointer value of 0 </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 32767. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>+</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the byte at the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing the byte value 255 results </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 0. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>-</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the byte at the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing the byte value 0 results </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 255. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>.</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Output the character whose ASCII </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value is the byte at the pointer </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>[</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump forward past the matching <TT>]</TT> if the </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>byte at the pointer is zero. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>]</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump backward to the matching <TT>[</TT> </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>unless the byte at the pointer is zero. </TD></TR></TBODY></TABLE></DIV><P><BR>For this problem, you will write a program that reads in, parses and executes a brainf*ck program.</span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The first line of input contains an integer <i>N</i>, (1 <span lang="en-us">&le; <i>N</i> &le;</span> 100) , which is the number of brainf*ck programs that follow. Each program consists of one or more lines of brainf*ck commands ending with a line that consists of the word `end'. Your program should ignore any illegal characters (I.E. any character not in the set: <TT><>+-.[]</TT>), If a percent sign (<TT>%</TT>) is encountered during parsing, the remainder of the line should be discarded. This constitutes a comment. The maximum number of commands in a brainf*ck program is 128000.</div><p class="pst">Output</p><div class="ptx" lang="en-US"><span lang="en-us"><p>For each brainf*ck program, your program should output the text &lsquo;PROGRAM #n:&rsquo; on a single line (where <i>n</i> is the program number: 1 &le; <i>n</i> &le; <i>N</i>), followed by the output generated by the brainf*ck program, followed by a single newline character. The only possible parsing error that can occur is if there is an unmatched <TT>[</TT> or <TT>]</TT> in the brainf*ck program. If your program encounters such an error, it should simply print &lsquo;COMPILE ERROR&rsquo; instead of executing the program. All brainf*ck programs will use no more than the specified 32768 bytes of memory.</span></div><p class="pst">Sample Input</p><pre class="sio">3
++++++++[>+++++++++ % hello-world.
<-]>.<+++++[>++++++<-]>-.+++++++..
+++.<++++++++[>>++++<<-]>>.<<++++[>
------<-]>.<++++[>++++++<-]>.+++.
------.--------.>+.
end
+++[>+++++++[.
end
%% Print alphabet, A-Z.
+ + + + + +++++++++++++++++++++>
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
+< [ >.+<- ]
end</pre><p class="pst">Sample Output</p><pre class="sio">PROGRAM #1:
Hello World!
PROGRAM #2:
COMPILE ERROR
PROGRAM #3:
ABCDEFGHIJKLMNOPQRSTUVWXYZ</pre><p class="pst">