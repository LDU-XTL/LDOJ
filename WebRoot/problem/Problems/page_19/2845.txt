</p><div class="ptx" lang="en-US"><P>Adding binary numbers is a very simple task, and very similar to the longhand addition of decimal numbers. As with decimal numbers, you start by adding the bits (digits) one column at a time, from right to left. Unlike decimal addition, there is little to memorize in the way of rules for the addition of binary bits:</P><PRE>   0 + 0 = 0<br>   1 + 0 = 1<br>   0 + 1 = 1<br>   1 + 1 = 10<br>   1 + 1 + 1 = 11</PRE><P>Just as with decimal addition, when the sum in one column is a two-bit (two-digit) number, the least significant figure is written as part of the total sum and the most significant figure is <span lang="en-us">&ldquo;carried&rdquo;</span> to the next left column. Consider the following examples:</P><PRE>                       11  1 &lt;-- Carry bits --&gt; 1   11<br>  1001101             1001001                    1000111<br>+ 0010010           + 0011001                  + 1010110<br> --------           ---------                  ---------<br>  1011111             1100010                   10011101</PRE><P>The addition problem on the left did not require any bits to be carried, since the sum of bits in each column was either 1 or 0, not 10 or 11. In the other two problems, there definitely were bits to be carried, but the process of addition is still quite simple. </div><p class="pst">Input</p><div class="ptx" lang="en-US">The first line of input contains an integer <I>N</I>, (<span lang="en-us">1 &le; <I>N</I> &le; 1000</span>), which is the number of binary addition problems that follow. Each problem appears on a single line containing two binary values separated by a single space character. The maximum length of each binary value is 80 bits (binary digits). Note: The maximum length result could be 81 bits (binary digits).</div><p class="pst">Output</p><div class="ptx" lang="en-US"><P>For each binary addition problem, print the problem number, a space, and the binary result of the addition. Extra leading zeroes must be omitted.</div><p class="pst">Sample Input</p><pre class="sio">3
1001101 10010
1001001 11001
1000111 1010110</pre><p class="pst">Sample Output</p><pre class="sio">1 1011111
2 1100010
3 10011101</pre><p class="pst">