</p><div class="ptx" lang="en-US"><span lang="en-us"><p>You are the boss of a small lighting fixture company which has n employees. Inspired by Ben Stillerâ€™s character in <i>Starsky and Hutch</i>, you have recently taken on the habit of telling your employees to &ldquo;do it!&rdquo; when you want things done. While <i>n</i><sub>+</sub> of the n employees respond positively to your &ldquo;do it!&rdquo;s, <i>n</i><sub>&minus;</sub> employees respond negatively and <i>n</i><sub>0</sub> are neutral to your words.</p><p>At time 0, each of your employees begins working alone on building a lighting fixture. Each lighting fixture takes 100 units of labor to finish. Normally, each of your employees contributes <i>r</i> units of labor towards finishing his/her lighting fixture during each time interval (or the amount of labor units remaining for the fixture, whichever is smaller). Thus, an employee would normally take <i>ceiling</i>(100 &frasl; <i>r</i>) time intervals to finish his or her lighting fixture. During an interval, however, if you yell &ldquo;do it!&rdquo; over the company intercom, employees who respond positively to your command will do <i>r</i> + 2 units of labor during that time interval, whereas employees who respond negatively will do <i>r</i> &minus; 1 units of labor during the time interval.</p><p>Assuming that each employee works on only his or her lighting fixture, and assuming that you yell &ldquo;do it!&rdquo; at most once during each time interval, your goal is to plan a sequence of &ldquo;do it!&rdquo;s so as to ensure that the sum of the times needed to finish all <i>n</i> lighting fixtures is minimized.</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>The input test file will contain multiple test cases. Each input test case will be given as a line containing four integers, <i>n</i><sub>+</sub>, <i>n</i><sub>&minus;</sub>, <i>n</i><sub>0</sub>, and <i>r</i> (where 0 &le; <i>n</i><sub>+</sub>, <i>n</i><sub>&minus;</sub>, <i>n</i><sub>0</sub> &le; 1000 and 1 &le; <i>r</i> &le; 100). The end-of-file is marked by a test case with <i>n</i><sub>+</sub> = <i>n</i><sub>&minus;</sub> = <i>n</i><sub>0</sub> = <i>r</i> = 0 and should not be processed.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>For each input case, the program should print the minimum sum of times needed to finish all n lighting fixtures.</p></div><p class="pst">Sample Input</p><pre class="sio">3 1 1 2
1 3 0 2
0 0 0 0</pre><p class="pst">Sample Output</p><pre class="sio">188
200</pre><p class="pst">Hint</p><div class="ptx" lang="en-US"><span lang="en-us"><p>In first test case, one optimal strategy is to yell &ldquo;do it&rdquo; in each of the first 25 time intervals. As a result, the 3 positively-responding employees provide 4 units of labor per time interval and thus finish their fixtures in 25 time units. The 1 negatively-responding employee will provide 1 unit of labor per time interval for the first 25 time intervals, 2 units of labor per time interval afterwards, and thus will finish in 25 + 38 = 63 time units. Finally, the neutral employee will always provide 2 units of labor per time interval and hence will finish in 50 time units. This gives a total of 3(25) + 63 + 50 = 188 time units.</p><p>In the second test case, an optimal strategy is to never yell &ldquo;do it&rdquo;. Thus all four employees finish in 50 time units so the total amount of time taken is 200 time units.</p></span></div><p class="pst">