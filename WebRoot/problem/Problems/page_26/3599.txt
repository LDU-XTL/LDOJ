</p><div class="ptx" lang="en-US"><p>In the theory of formal languages, the <i>pumping lemma for regular languages</i> bears importance for its characterization of an essential property of all regular languages.</p><p>In case of your unfamiliarity, we shall first review several related concepts. A <i>regular language</i> is the set of all strings accepted by a <i>deterministic finite automaton</i> (<i>DFA</i>). A DFA is an abstract model of computation informally explained below.</p><p>A DFA can be depicted by a state chart. Each node in the state chart represents a <i>state</i>. Of all states, exactly one is designated as the <i>start state</i>; and a subset of them is designated as a set of <i>final states</i>. Each labeled directed arc in the state chart represents a <i>state transition</i>. When the DFA works, it starts in the start state, reads symbols from a string one by one, and performs state transition accordingly. A state transition “<i>x</i> —<i>c</i>→ <i>y</i>” means that if the DFA reads a symbol <i>c</i> when it is in state <i>x</i>, it will transit to state <i>y</i>. The DFA is said to accept a string if it is in a final state when it finishes reading symbols from the string.</p><p align="center"><img src="images/3599_1.png"></p><p align="center">Figure 5: Transition function <i>δ</i> of DFA <i>M</i></p><p>Consider the state chart in Figure 5, which describes a DFA <i>M</i>. The states of <i>M</i> are {0, 1, 2, 3}. We designate 1 as the start state and 3 as the only final state. When fed with the string <tt>aba</tt>, <i>M</i> starts in state 1 and performs the state transitions “1 —<tt>a</tt>→ 2 —<tt>b</tt>→ 2 —<tt>a</tt>→ 3” to reach the final state 3. Consequently, <i>M</i> accepts the string <tt>aba</tt>. Precisely speaking, <i>M</i> accepts the regular language <i>L</i> = {<tt>ab</tt><sup><i>i</i></sup><tt>a</tt> : <i>i</i> ≥ 0} = {<tt>aa</tt>, <tt>aba</tt>, <tt>abba</tt>, …}.</p><p>The pumping lemma for regular languages, put informally, states that for any sufficiently long string <i>w</i> of a regular language <i>L</i> can be written, subject to some length constraints, as the concatenation of three substrings <i>x</i>, <i>y</i> and <i>z</i> such that the strings resulting from removing or repeating <i>y</i> in <i>w</i>, i.e. <i>xz</i> and <i>xyyz</i>, <i>xyyyz</i>, …, are also strings of <i>L</i>.</p><p>Given a DFA accepting a regular language <i>L</i>, find a string <i>w</i> ∈ <i>L</i> satisfying that <i>w</i> can be written as <i>w</i> = <i>xyz</i> so that {<i>xz</i>, <i>xyz</i>, <i>xyyz</i>, …} ⊆ <i>L</i>, and 0 &lt; |<i>y</i>| ≤ |<i>w</i>| &lt; 3<i>n</i> (| · | means the length of a string).</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The input contains a single test case describing a DFA whose states are {0, 1, 2, …, <i>n</i>} and which reads only lowercase letters. The first line contains <i>n</i> and the start state <i>s</i> (1 ≤ <i>s</i> ≤ <i>n</i> ≤ 1000). The second line contains an integer <i>m</i> (0 ≤ <i>m</i> ≤ 26<i>n</i>). Each of the following <i>m</i> lines contains an integer <i>x</i>, a symbol <i>c</i> and another integer <i>y</i> (1 ≤ <i>x</i> ≤ <i>n</i>; <i>c</i> ∈ Σ; 0 ≤ <i>y</i> ≤ <i>n</i>), specifying a state transition “<i>x</i> —<i>c</i>→ <i>y</i>”. The state transition “<i>x</i> —<i>c</i>→ 0” is implicitly assumed for any state <i>x</i> and symbol <i>c</i> if not otherwise specified. The next line contains an integer <i>k</i> (0 ≤ <i>k</i> ≤ <i>n</i>), which is followed by a line containing <i>k</i> integers, the final states of <i>M</i>. 0 is not a final state.</p><p>If there multiple choices of <i>w</i>, you may choose any one.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>If some <i>w</i> = <i>xyz</i> ∈ <i>L</i> satisfies the given requirements, print “<i>x</i><tt>(</tt><i>y</i><tt>)</tt><i>z</i>”; otherwise, print “<tt>*</tt>”.</p></div><p class="pst">Sample Input</p><pre class="sio">3 1
3
1 a 2
2 a 3
2 b 2
1
3</pre><p class="pst">Sample Output</p><pre class="sio">a(b)a</pre><p class="pst">