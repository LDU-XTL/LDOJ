</p><div class="ptx" lang="en-US"><p>The <i>Research Institute of Given Strings</i> (<i>RIGS</i>) is a well-known place where people investigate anything about strings. Peter works in the department of string operations of <i>RIGS</i>. His department invents different ways to add, multiply, divide strings and even to take a logarithm of a string based on another one.</p><p>Now Peter is involved in the new project concerning orthogonal strings. Peter proposed that two strings <i>P</i> = <i>P</i><sub>1</sub><i>P</i><sub>2</sub>…<i>P<sub>n</sub></i> and <i>Q</i> = <i>Q</i><sub>1</sub><i>Q</i><sub>2</sub>…<i>Q<sub>n</sub></i> of equal length <i>n</i> are called orthogonal, if <i>P<sub>i</sub></i> ≠ <i>Q<sub>i</sub></i> for each i in the range 1..<i>n</i>. String <i>S</i> of length <i>n</i> is called orthogonal to set of strings <i>V</i> = ‹<i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, …, <i>V<sub>m</sub></i>› (each of length <i>n</i> too) if <i>S</i> is orthogonal to <i>V<sub>j</sub></i> for any <i>j</i> in range 1..<i>m</i>.</p><p>Peter’s task is to invent the operation of <i>orthogonal sum</i> of two given strings. The current Peter’s proposal allows to add only strings on a basis of some set, if they are orthogonal to this set. To do this, Peter selects an arbitrary set of strings <i>V</i> such that all strings in <i>V</i> have the same length <i>n</i>. Then Peter takes all strings of length <i>n</i> orthogonal to <i>V</i> over a fixed alphabet and sorts them, thus obtaining a sorted sequence of strings <i>T</i>. Let’s denote the length of sequence <i>T</i> as <i>M</i>, and enumerate the elements of this sequence as <i>T</i><sub>0</sub>, <i>T</i><sub>1</sub>, …, <i>T</i><sub><i>M</i>−1</sub>. Now Peter says that the orthogonal sum of two strings <i>A</i> = <i>T<sub>a</sub></i> and <i>B</i> = <i>T<sub>b</sub></i> is a string <i>C</i> = <i>T<sub>c</sub></i> where <i>c</i> = (<i>a</i> + <i>b</i>) mod <i>M</i>.</p><p>Your task is to find the orthogonal sum of two given strings <i>A</i> and <i>B</i> on the basis of a given set <i>V</i> over the alphabet of small English letters.</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The first line of the input file contains two integers: <i>n</i> — the length of each string (1 ≤ <i>n</i> ≤ <nobr>100 000</nobr>) and <i>k</i> — the cardinality of <i>V</i> (1 ≤ <i>n</i> ⋅ <i>k</i> ≤ 100 000). The next <i>k</i> lines contains strings <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, …, <i>V<sub>k</sub></i>.</p><p>The last two lines contain strings <i>A</i> and <i>B</i> of length <i>n</i>. All strings <i>V<sub>j</sub></i>, <i>A</i> and <i>B</i> consist of small letters of English alphabet. It is guaranteed that <i>A</i> and <i>B</i> are orthogonal to <i>V</i>.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>Output the orthogonal sum of strings <i>A</i> and <i>B</i> on the basis <i>V</i>.</p></div><p class="pst">Sample Input</p><pre class="sio"><table style="border-collapse: collapse; border-color: black;" border="1"><tr><th>#1</th><td>2 2<br>ac<br>ad<br>bb<br>bb</td></tr><tr><th>#2</th><td>2 1<br>yy<br>zz<br>zz</td></tr></table></pre><p class="pst">Sample Output</p><pre class="sio"><table style="border-collapse: collapse; border-color: black;" border="1"><tr><th>#1</th><td>be</td></tr><tr><th>#2</th><td>zx</td></tr></table></pre><p class="pst">