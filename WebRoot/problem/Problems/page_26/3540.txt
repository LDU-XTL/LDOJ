</p><div class="ptx" lang="en-US"><p>Nick is a mathematician and his speciality is Boolean logic, especially repetition-free functions. The Boolean function is repetition-free if it can be represented as a repetition-free formula. Formula is repetition-free if each variable occurs in the formula only once.</p><p>Let us fix the syntax of considered logical formulae:</p><ul><li>Variables — letters from ‘<tt>a</tt>’ to ‘<tt>k</tt>’;</li><li>Parentheses — if <i>E</i> is a formula, then (<i>E</i>) is another;</li><li>Negation — ¬<i>E</i> is a formula for any formula <i>E</i>;</li><li>Conjunction — <i>E</i><sub>1</sub> ∧ <i>E</i><sub>2</sub> ∧ ⋯ ∧ <i>E<sub>n</sub></i>;</li><li>Disjunction — E<sub>1</sub> ∨ <i>E</i><sub>2</sub> ∨ ⋯ ∨ <i>E<sub>n</sub></i>.</li></ul><p>The operations are listed from the highest priority to the lowest.</p><p>The problem is to represent given Boolean function by a repetition-free formula.</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The only line of input contains the Boolean function represented as a string consisting of characters ‘<tt>a</tt>’..‘<tt>k</tt>’, ‘<tt>(</tt>’, ‘<tt>)</tt>’, ‘<tt>~</tt>’, ‘<tt>&amp;</tt>’ and ‘<tt>|</tt>’. The last three tokens stand for ¬, ∧ and ∨ respectively. Tokens can be separated by an arbitrary number of spaces. The line contains <nobr>1 000</nobr> characters at most. The formula in the file is syntactically correct.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>The first line of the output file must contain “<tt>Yes</tt>” if function is repetition-free and “<tt>No</tt>” otherwise.</p><p>In the former case the following line must contain the repetition-free formula for given Boolean function in the same format as in the input file. The line must contain no more than <nobr>1 000</nobr> characters.</p></div><p class="pst">Sample Input</p><pre class="sio"><table style="border-color: black; border-collapse: collapse;" border="1"><tr><th>#1</th><td>(a | b) &amp; (a | c)</td></tr><tr><th>#2</th><td>d&amp;~d</td></tr><tr><th>#3</th><td>d &amp; ~d | ~((a|~b) &amp; (a|c))</td></tr><tr><th>#4</th><td>a &amp; b | ~ a &amp; ~b</td></tr></table></pre><p class="pst">Sample Output</p><pre class="sio"><table style="border-color: black; border-collapse: collapse;" border="1"><tr><th>#1</th><td>Yes<br>a | b &amp; c</td></tr><tr><th>#2</th><td>No</td></tr><tr><th>#3</th><td>Yes<br>~a&amp;(b|~c)</td></tr><tr><th>#4</th><td>No</td></tr></table></pre><p class="pst">