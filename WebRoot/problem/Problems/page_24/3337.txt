</p><div class="ptx" lang="en-US"><div><p>This problem is about evaluating some C-style expressions. The expressions to be evaluated will contain only simple integer variables and a limited set of operators; there will be no constants in the expressions. There are 26 variables in the program, named by lower case letters <i>a</i> through <i>z</i>. Before evaluation, the initial values of these variables are <i>a</i> = 1, <i>b</i> = 2, ..., <i>z</i> = 26.</p><p>The operators allowed are addition and subtraction (binary + and -), with their known meaning. So, the expression <i>a</i> + <i>c</i> - <i>d</i> + <i>b</i> has the value 2 (1 + 3 - 4 + 2). Additionally, ++ and â€“- operators are allowed in the input expression too, which are unary operators, and may come before or after variables. If the ++ operator comes before a variable, then that variable's value is increased (by one) before the variable's value is used in calculating the value of the whole expression. Thus the value of ++ <i>c</i> - <i>b</i> is 2. When ++ comes after a variable, that variable is increased (by one) after its value is used to calculate the value of the whole expression. So, the value of the <i>c</i> ++ - <i>b</i> is 1, though <i>c</i> is incremented after the value for entire expression is computed; its value will be 4 too. The -- operator behaves the same way, except that it decreases the value of its operand. </p><p>More formally, an expression is evaluated in the following manner: </p><ul><li>Identify every variable that are preceded by ++. Write an assignment statement for incrementing the value of each of them, and omit the ++ from before that variable in the expression.</li><li>Do similarly for the variables with ++ after them.</li><li>At this point, there is no ++ operator in the expression. Write a statement evaluating the remaining expression after the statements determined in step 1, and before those determined in step 2.</li><li>Execute the statements determined in step 1, then those written in step 3, and finally the one written in step 2.</li></ul><p>This way, evaluating ++ <i>a</i> + <i>b</i> ++ is the same as computing <i>a</i> = <i>a</i> + 1, <i>result</i> = <i>a</i> + <i>b</i>, and <i>b </i>= <i>b</i> + 1.</p></div></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The first line of the input contains a single integer <i>T</i> which is the number of test cases, followed by <i>T</i> lines each containing the input expression for a test case. Ignore blanks in the input expression. Be sure that no ambiguity is in the input expressions (like <i>a</i>+++<i>b</i>). Similarly, ++ or -- operators do not appear both before and after one single variable (like ++<i>a</i>++). You may safely assume each variable appears only once in an expression.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>For each test case, write each expression as it appears in the input (exactly), then write the value of the complete expression. After this, on separate lines, write the value of each variable after evaluating the expression (write them in sorted order of the variable names). Write only the values of the variables that are used in the expressions. To find out about the output format, follow the style used in the sample output below.</p></div><p class="pst">Sample Input</p><pre class="sio">2
a+b
c+f--+--a
</pre><p class="pst">Sample Output</p><pre class="sio">Expression: a+b
value = 3
a = 1
b = 2
Expression: c+f--+--a
value = 9
a = 0
c = 3
f = 5
</pre><p class="pst">