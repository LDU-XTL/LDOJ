</p><div class="ptx" lang="en-US"><p>Mr. Ford Trunkings, a well-known archaeologist, has recently discovered the ruins of a strange ancient settlement in the heart of Africa. After a few weeks of investigation, he and his colleagues have understood that they have found something great. The tribe <i>Velulu</i>, who lived there millenia ago, seemed to have very high level of development. They even had an alphabet! But most of them probably became victims of a glacial period about <nobr>20 000</nobr> years ago. So all their cultural achievements were completely lost. Only a few lucky remains of the tribe survived the glacial period, and after thousands of years they restarted their attempt to create a great civilization. They are now known as Zulu. But this is a story for another time&#8230;</p><p>Our current task will be to decipher <i>Velulu</i> texts. But the main difficulty is that there are no spaces in their texts at all. So all words of the text merge into one huge sequence of letters which is very hard to understand.</p><p>Fortunately, the archaeologists have already built a draft of <i>Velulu</i> language dictionary. Of course they know about recent achievements in computer science that allow one to parse a sequence of letters to a text consisting of words from a given dictionary. They have tried this technique, but after a few attempts they have discovered that there is a huge number of such sequences for almost every text of reasonable size. They don&#8217;t know whether it is a problem with the method or some peculiarity of <i>Velulu</i> language. So they have invented another method which relies not only on dictionary, but also on order of parts of speech in a sentence.</p><p>Now they have not only the proposal for dictionary, but also the proposal describing how sentences can be constructed in <i>Velulu</i> language. Your task is to find out how many ways a given text can be parsed, according to this information, and provide an example of parsing the text.</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>You will be given the dictionary, the sentence construction rules and the text. For each word you will know which part of speech it can stand for.</p><p>The first line of the input file contains three numbers: <i>n</i>, <i>m</i> and <i>k</i>, where 1 &#8804; <i>n</i> &#8804; <nobr>5 000</nobr> is the number of words in <i>Velulu</i> language, 1 &#8804; <i>m</i> &#8804; 10 is the number of possible sentence construction rules, and 1 &#8804; <i>k</i> &#8804; 10 is the number of different parts of speech.</p><p>Each of the following <i>n</i> lines contains one word and a list of possible parts of speech it can stand for. There are not too many letters in <i>Velulu</i> language, so archaeologists have decided to encode them with small English letters. In each line, the word (non-empty, shorter than 20 letters) is given, followed by a space, then number <i>k<sub>i</sub></i> (1 &#8804; <i>k<sub>i</sub></i> &#8804; 10) of parts of speech possible for this word, then <i>k<sub>i</sub></i> numbers <i>a<sub>ij</sub></i> each denoting a particular part of speech (1 &#8804; <i>a<sub>ij</sub></i> &#8804; <i>k</i>). All <i>a<sub>ij</sub></i> for any word are given in strictly increasing order. Words in the input file are given in arbitrary order (the dictionary is not perfect, and the exact order of letters is not yet known). Each word occurs exactly once.</p><p>The following <i>m</i> lines list the sentence construction rules. Each rule is described by a number of words <i>l<sub>i</sub></i> (1 &#8804; <i>l<sub>i</sub></i> &#8804; 10) in this specific type of sentence, followed by <i>l<sub>i</sub></i> identifiers of parts of speech <i>b<sub>ij</sub></i> (1 &#8804; <i>b<sub>ij</sub></i> &#8804; <i>k</i>). No rule appears twice.</p><p>The last line of the input file is for the text to be deciphered. The text is non-empty and consists of less than <nobr>1 000</nobr> letters.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>The first line of the output file must contain the number of possible ways to parse the text. If the number is more than 10<sup>18</sup>, output a line &#8220;<tt>TOO MANY</tt>&#8221; instead.</p><p>If a correct parsing of the text exists, output an example of the parsing to the second line. Write the original text with spaces and full stops inserted at corresponding positions to get an acceptable sequence of sentences. Full stops are inserted immediately after the last word of each sentence, and must be followed by a space (see output example for further clarification). The whole text must be completely split to sentences.</p><p>If there is more than one acceptable way of parsing, output any one.</p></div><p class="pst">Sample Input</p><pre class="sio">5 2 2
ba 1 2
za 2 1 2
a 2 1 2
caba 1 1
ab 1 1
2 1 2
3 2 2 1
abazabacaba</pre><p class="pst">Sample Output</p><pre class="sio">2
ab a. za ba caba.</pre><p class="pst">