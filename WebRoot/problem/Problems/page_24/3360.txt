</p><div class="ptx" lang="en-US"><p>A walk <i>W</i> in a graph <i>G</i> is a finite sequence</p><p><center><i>v</i><sub>0</sub><i>e</i><sub>1</sub><i>v</i><sub>1</sub><i>e</i><sub>2</sub><i>v</i><sub>2</sub>...<i>v</i><sub><i>k</i>-1</sub><i>e<sub>k</sub>v<sub>k</sub></i></center></p><p>whose terms are alternately vertices and edges such that, for 1 ≤ <i>i</i> ≤ <i>k</i>, the edge <i>e<sub>i</sub></i> has end vertices <i>v</i><sub><i>i</i>-1</sub> and <i>v<sub>i</sub></i>. If the edges <i>e</i><sub>1</sub>, <i>e</i><sub>2</sub>, ... , <i>e<sub>k</sub></i> of the walk are distinct, then <i>W</i> is called a <i>trail</i>. A trail with <i>v</i><sub>0</sub> ≠ <i>v<sub>k</sub></i> is an <i>open trail</i>. </p><p>If <i>v</i><sub>0</sub> = <i>v<sub>k</sub></i>, then <i>W</i> is a closed walk. A tour of <i>G</i> is a closed walk of <i>G</i> that includes every edge of <i>G</i> at least once.</p><p>Write a program that determines whether for a graph <i>G</i>: </p><p><ol><li>there exists an open trail that includes every edge of G, or not; and </li><li>there exists a tour that includes every edge of G exactly once, or not </li></ol></p><p>where graph <i>G</i> is undirected, has at least 2 edges, has no self-loops (i.e., edges (<i>v</i><sub>i</sub>, <i>v</i><sub>i</sub>)), but may contain parallel edges (i.e., 2 or more edges having the same end vertices).</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The input file consists of several test cases, each with a case number, the set of vertices in a graph, and the set of edges in the graph, as shown in the samples. Assume the vertices are single letters only.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>For each of the test cases, output "Yes" if the graph has at least one open trail that includes every edge of the graph, and "No", if not; and output "Yes" if the graph has at least one tour that includes every edge of the graph exactly once, and "No" if not.</p></div><p class="pst">Sample Input</p><pre class="sio">Case 1: { a, b, c, d, e } { (a,b), (b,c), (c,d), (d,a), (b,e), (c,e) }
Case 2: { a, b, c, d, e } { (a,b), (a,c), (b,e), (b,d), (b,c), (d,c), (d,e), (d,e), (e,c) } 
Case 3: { A, B, c, d } { (A,B), (c,d) }</pre><p class="pst">Sample Output</p><pre class="sio">Yes No 
No Yes 
No No</pre><p class="pst">