</p><div class="ptx" lang="en-US"><p>Hyphenation bears importance in typesetting for its contribution to more efficient use of paper as well as more regular appearance of right-side margins without requiring significant spacing adjustments. Compare the following:</p><table style="border-collapse: collapse;" align="center" border="1" bordercolor="#000000"><tr><th></th><th>Without hyphenation</th><th>With hyphenation</th></tr><tr><th>Flush left</th><td style="width: 15em; font-family: Times,Times New Roman;">Long words like <i>supercalifragilisticexpialidocious</i> and <i>antidisestablishmentarianism</i> make this paragraph look agonizing.</td><td style="width: 15em; font-family: Times,Times New Roman;">Even with long words like <i>supercal-<wbr>ifragilisticexpialidocious</i> and <i>antidis-<wbr>establishmentarianism</i> this paragraph looks comfortable.</td></tr><tr><th>Justified</th><td style="width: 15em; text-align: justify; font-family: Times,Times New Roman;">Long words like <i>supercalifragilisticexpialidocious</i> and <i>antidisestablishmentarianism</i> make this paragraph look agonizing.</td><td style="width: 15em; text-align: justify; font-family: Times,Times New Roman;">Even with long words like <i>supercal-<wbr>ifragilisticexpialidocious</i> and <i>antidis-<wbr>establishmentarianism</i> this paragraph looks comfortable.</td></tr></table><p>Typesetting systems and word processors use hyphenation algorithms to hyphenate words automatically. Generally, hyphenation algorithms is based on either rules or dictionaries. Rule-based algorithms are inevitably subject to errors. For example, the vowel-<wbr>consonant-<wbr>consonant-<wbr>vowel breaking rule, used in the original TeX hyphenation algorithm, does not work with words like <i>selfadjoint</i> (compare <i>sel-fadjoint</i> and <i>self-adjoint</i>). Dictionary-based algorithms require a vast amount of storage for dictionaries and cannot handle words missing from the dictionaries.</p><p>In the 1983 paper <i>Word Hy-phen-a-tion by Com-put-er</i>, Franklin Mark Liang proposed a neat solution to the problem. Liang’s algorithm is primarily based on rules, but the rules are generated from dictionaries. Rules in Liang’s algorithm are patterns formed by inserting single numbers into short sequences of letters. An odd number defines a hyphenating point; an even number defines an inhibiting point. For example, <tt>2b5s2</tt> means that for <i>absorb</i>, hyphenation can occur just after <i>ab-</i> but not before the first <i>b</i> or after <i>s</i>. Dots may appear at either ends of patterns, matching the corresponding ends of words. For example, <tt>.ca4t</tt> is effective in <i>cation</i> but not in <i>dedication</i> or <i>copycat</i>. If multiple patterns define both hyphenating and inhibiting points in the same position in a word, only the hyphenating/inhibiting point defined by the largest number is effective. In light of this rule, <tt>.ca4t</tt> prevents <tt>1tio</tt> from incorrectly hyphenating <i>cation</i> into <i>cat-ion</i>. A final rule dictates that hyphenation should not occur just after the first letter or before the last letter, and words shorter than 5 letters should not be hyphenated.</p><p>With an carefully selected set of patterns, Liang’s algorithm requires a very small exception list to ensure that it correctly hyphenates all common words appearing in the dictionary. The lastest distribution of the TeX system uses an exception list consisting of only 14 words.</p><p>Given a set of hyphenation patterns and an exception list, use Liang’s algorithm to decide the hyphenating points of some words.</p></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The input is divided into two parts by a separator line containing a single <tt>#</tt>. The first part contains a list of hyphenation patterns and the exception list. The largest possible number that appears in the patterns is six. Words in the exception list are preceded by single <tt>@</tt>’s, with <tt>-</tt>’s indicating all possible hyphenating points. All letters in the first part are lowercase. The second part contains the words to be hyphenated. Words consist of only lowercase or uppercase letters. Matching between patterns and words is case-insensitive.</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>For each word given, output the result of hyphenation using <tt>-</tt>’s to indicate all hyphenating points. Cases of letters should be preserved.</p></div><p class="pst">Sample Input</p><pre class="sio">.ca4t hy3ph he2n hena4 hen5at
1na n2at 1tio 2io o2n. @ta-ble
#
hyphenation
cation
table</pre><p class="pst">Sample Output</p><pre class="sio">hy-phen-ation
cation
ta-ble</pre><p class="pst">