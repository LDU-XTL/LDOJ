</p><div class="ptx" lang="en-US"><div><p>Since Jack did a fantastic job on the simple distributed storage system, his mentor pushes him into another project. One scenario of the project is that, given a set of machines and a set of Web applications with CPU demands, a placement controller should decide which server should be used for each application and how to deploy the instances of those applications. </p><p>We assume that there are <b>n</b> applications and <b>m</b> servers. Some instances for the applications are already set up on the servers. However, each server runs different set of instances, and their CPU capacity are also distinct. For instance, server A runs two instances for application X and Y, while server B runs two instances for application Y and Z. So server A can handle some requests for application X and Y, and server B can run some requests for application Y and Z. To simplify our problem, we assume that the CPU capacity and CPU requirement can be represented by integer. </p><p>A server is fully utilized if its residual CPU capacity is zero. An application instance is "fully utilized” if it runs on a fully utilized server, otherwise it is called "underutilized”. However, an instance can be &quot;completely idle&quot; if it has no load. A placement scheme is "efficient” as long as for each application, there is at most one instance of this application on the status of "underutilized” but not &quot;completely idle&quot;. </p><p>Your task is to write a placement controller program to make an "efficient” assignment and maximize the total satisfied CPU demand of all the applications. </p><p>An application can be run on several instances, and those instances mutually satisfy the CPU requirement of that application. All the instances' CPU load on one server cannot exceed the CPU capacity of that server.</p></div></div><p class="pst">Input</p><div class="ptx" lang="en-US"><div><p>The first line of input file contains two integers <b>n</b> and <b>m</b>(<b>n</b>,<b>m</b> &le; 200), representing the number of applications and the number of servers. </p><p>The second line contains <b>n</b> integers, representing the required CPU demand (&le; 1000)for each application. The application is numbered from 0 to <b>n</b>-1. </p><p>The following <b>m</b> lines describe the details of each server. In the i<sup>th</sup> line, the first integer represents CPU capacity of this server( &le; 10000), and the second integer k<sub>i</sub> represents the number of instances running on it. Following is k<sub>i</sub> ( &le; <b>n</b>)integers, a<sub>i,0</sub>, a<sub>i,1</sub>,…,a<sub>i,ki</sub>, representing the running instances for application a<sub>i,0</sub>, application a<sub>i,1</sub>,…, application a<sub>i,ki</sub>. </p></div></div><p class="pst">Output</p><div class="ptx" lang="en-US"><div><p>The first line of the output file is an integer representing the maximum satisfied demand. </p><p>The following <b>m</b> lines contain the details of your solution. The i<sup>th</sup> line contains k<sub>i</sub> integers, representing how many CPU load put on the instances running on i<sup>th</sup> server. The order should be exactly the same as the input file. </p></div></div><p class="pst">Sample Input</p><pre class="sio">3 2
10 20 15
15 2 1 0
15 2 1 2
</pre><p class="pst">Sample Output</p><pre class="sio">30
15 0
0 15
</pre><p class="pst">Hint</p><div class="ptx" lang="en-US">In the sample case, for the first server, instance for application 1 occupies the whole CPU (15 unit) and instance for application 0 is completed idle. For the second server, instance for application 2 is fully utilized while instance for application 1 is completed idle. </div><p class="pst">