</p><div class="ptx" lang="en-US"><img src=images/3035_1.jpg align=right hspace=10><span lang="en-us"><p>The Army of Coin-tossing Monkeys (ACM) is in the business of producing randomness. Good random numbers are important for many applications, such as cryptography, online gambling, randomized algorithms and panic attempts at solutions in the last few seconds of programming competitions.</p><p>Recently, one of the best monkeys has had to retire. However, before he left, he invented a new, cheaper way to generate randomness compared to directly using the randomness generated by coin-tossing monkeys. The method starts by taking an undirected graph with 2<sup><i>n</i></sup> nodes labelled 0, 1, &hellip;, 2<i><sup>n</sup></i> &minus; 1. To generate <i>k</i> random <i>n</i>-bit numbers, they will let the monkeys toss n coins to decide where on the graph to start. This node number is the first number output. The monkeys will then pick a random edge from this node, and jump to the node that this edge connects to. This new node will be the second random number output. They will then select a random edge from this node (possibly back to the node they arrived from in the last step), follow it and output the number of the node they landed on. This walk will continue until <i>k</i> numbers have been output.</p><p>During experiments, the ACM has noticed that different graphs give different output distributions, some of them not very random. So, they have asked for your help testing the graphs to see if the randomness is of good enough quality to sell.</p><p>They consider a graph good if, for each of the <i>n</i> bits in each of the <i>k</i> numbers generated, the probability that this bit is output as 1 is greater than 25% and smaller than 75%.</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>The input will consist of several data sets. Each set will start with a line consisting of three numbers <i>k</i>, <i>n</i>, <i>e</i> separated by single spaces, where <i>k</i> is the number of <i>n</i>-bit numbers to be generated and <i>e</i> is the number of edges in the graph (1 &le; <i>k</i> &le; 100, 1 &le; <i>n</i> &le; 10 and 1 &le; <i>e</i> &le; 2000). The next <i>e</i> lines will consist of two space-separated integers <i>v</i><sub>1</sub>, <i>v</i><sub>2</sub> where 0 &le; <i>v</i><sub>1</sub>, <i>v</i><sub>2</sub> &lt; 2<sup><i>n</i></sup> and v1 &ne; v2. Edges are undirected and each node is guaranteed to have at least one edge. There may be multiple edges between the same pair of nodes.</p><p>The last test case will be followed by a line with <i>k</i> = <i>n</i> = <i>e</i> = 0, which should not be processed.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>For each input case, output a single line consisting of the word <code>Yes</code> if the graph is good, and <code>No</code> otherwise.</p></div><p class="pst">Sample Input</p><pre class="sio">10 2 3
0 3
1 3
2 3
5 2 4
0 1
0 3
1 2
2 3
0 0 0</pre><p class="pst">Sample Output</p><pre class="sio">No
Yes</pre><p class="pst">