</p><div class="ptx" lang="en-US"><span lang="en-us"><p>These days, Hunk is developing a special software for 2D digital image rotation. Here, the input image is described in the coordinate system shown in Figure 1 where the leftmost pixel of the image lies on the <i>y</i>-axis and the bottommost pixel of the image lies on the <i>x</i>-axis. The output image is described in the coordinate system shown in Figure 2 where and the leftmost pixel of the image lies on the <i>y</i>-axis, the topmost pixel lies on the <i>x</i>-axis.</p><div align="center"><table border="0"><tr><td><img src=images/3019_1.gif></td><td width="70"></td><td><img src=images/3019_2.gif></td></tr></table></div><p>He considers the following:</p><ol><li>Each image is a rectangle tiled with pixels. Pixels have discrete positions. The positions of their centers are referred to as their positions, which are usually denoted by order pairs of numbers (<i>y</i>, <i>x</i>).</li><li><p>In most cases, the dimensions of an image will change after rotation. As shown in Figure 3, rotating the original image (the blue rectangle) around its center will produce a new image (the red rectangle) with different height and width.</p><p align="center"><img src=images/3019_3.gif></p></li><li>Positions of pixels in the original image after rotation generally don't coincide with those of pixels in the new image. Rounding them to the nearest pixels might incur loss of image quality. An inverse transform method is used to tackle the difficulty. For each pixel in the new image, its position in the original image is computed using an inverse transform corresponding to the rotation to determine its color information.</li></ol><p>The task is, for an image of <i>h</i> &times; <i>w</i> pixels and an angle <i>&alpha;</i> of counterclockwise rotation, to determine the dimensions in pixels of the rotated image, and for each pixel in the new image described in the coordinate system shown in Figure 2, to find its relative position in the original image described in the coordinate system shown in Figure 1.</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><span lang="en-us"><p>The input consists of multiple test cases.</p><p>Each test case consists of one line containing two positive integers <i>h</i> (1 &le; <i>h</i> &le; 128) and <i>w</i> (1 &le; <i>w</i> &le; 128) and a real number <i>&alpha;</i> (0 &le; <i>&alpha;</i> &le; 360) where <i>h</i> denotes the height of the image in pixels, <i>w</i> denotes the width of the image in pixels, <i>&alpha;</i> denotes the angle in degrees by which the image is rotated in counterclockwise direction.</p><p>Process to the end of input.</p></span></div><p class="pst">Output</p><div class="ptx" lang="en-US"><span lang="en-us"><p>For each test case, first output one line containing two integer H and W separated by one space meaning the new image has <i>H</i> &times; <i>W</i> pixels. Then output <i>H</i> lines each containing <i>W</i> coordinates representing the relative positions of pixels of the new image in the original image. If a position falls on the original image, output it in the format (<i>y</i>, <i>x</i>) with two decimal digits beyond the decimal point, otherwise output (&minus;1.00, &minus;1.00) instead. The coordinates are in the order in which pixels are aligned in the coordinate system shown in Figure 2. Output a blank line after each test case.</p></span></div><p class="pst">Sample Input</p><pre class="sio">3 3 90
3 4 60</pre><p class="pst">Sample Output</p><pre class="sio">3 3
(2.00,2.00) (1.00,2.00) (0.00,2.00)
(2.00,1.00) (1.00,1.00) (0.00,1.00)
(2.00,0.00) (1.00,0.00) (0.00,0.00)

4 4
(-1.00,-1.00) (-1.00,-1.00) (-1.00,-1.00) (-1.00,-1.00)
(-1.00,-1.00) (1.93,1.88) (1.07,2.38) (0.20,2.88)
(-1.00,-1.00) (1.43,1.02) (0.57,1.52) (-1.00,-1.00)
(-1.00,-1.00) (0.93,0.15) (0.07,0.65) (-1.00,-1.00)</pre><p class="pst">Hint</p><div class="ptx" lang="en-US"><span lang="en-us"><p>If the rotated image has dimensions <i>l<sub>h</sub></i> &times; <i>l<sub>w</sub></i>, then its dimensions in pixels are (floor(<i>l<sub>h</sub></i>) + 1) &times; (floor(<i>l<sub>w</sub></i>) + 1).</p><p>Make sure that your solution won&rsquo;t output anything like &ldquo;&minus;0.00&rdquo;.</p></span></div><p class="pst">