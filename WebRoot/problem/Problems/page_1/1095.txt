</p><div class="ptx" lang="en-US">We can number binary trees using the following scheme: 
<br>The empty tree is numbered 0.
<br>The single-node tree is numbered 1.
<br>All binary trees having m nodes have numbers less than all those having m+1 nodes.
<br>Any binary tree having m nodes with left and right subtrees L and R is numbered n such that all trees having m nodes numbered > n have either Left subtrees numbered higher than L, or A left subtree = L and a right subtree numbered higher than R.
<br>
<br>The first 10 binary trees and tree number 20 in this sequence are shown below:
<br><center><img src="images/1095/1095_1.gif"></center>
<br>Your job for this problem is to output a binary tree when given its order number.
<br></div><p class="pst">Input</p><div class="ptx" lang="en-US">Input consists of multiple problem instances. Each instance consists of a single integer n, where 1 <= n <= 500,000,000. A value of n = 0 terminates input. (Note that this means you will never have to output the empty tree.)</div><p class="pst">Output</p><div class="ptx" lang="en-US">For each problem instance, you should output one line containing the tree corresponding to the order number for that instance. To print out the tree, use the following scheme:
<br>
<br>A tree with no children should be output as X.
<br>A tree with left and right subtrees L and R should be output as (L')X(R'), where L' and R' are the representations of L and R.
<br>  If L is empty, just output X(R').
<br>  If R is empty, just output (L')X.
<br></div><p class="pst">Sample Input</p><pre class="sio">1
20
31117532
0</pre><p class="pst">Sample Output</p><pre class="sio">X
((X)X(X))X
(X(X(((X(X))X(X))X(X))))X(((X((X)X((X)X)))X)X)</pre><p class="pst">