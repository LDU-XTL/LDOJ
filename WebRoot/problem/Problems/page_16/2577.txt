</p><div class="ptx" lang="en-US">A certain computer has 10 registers and 1000 words of RAM. Each register or RAM location holds a 3-digit integer between 0 and 999. Instructions are encoded as 3-digit integers and stored in RAM. The encodings are as follows: 
<br><ul><li>100 means halt 
<br><li>2dn means set register d to n (between 0 and 9) 
<br><li>3dn means add n to register d 
<br><li>4dn means multiply register d by n 
<br><li>5ds means set register d to the value of register s 
<br><li>6ds means add the value of register s to register d 
<br><li>7ds means multiply register d by the value of register s 
<br><li>8da means set register d to the value in RAM whose address is in register a 
<br><li>9sa means set the value in RAM whose address is in register a to the value of register s 
<br><li>0ds means goto the location in register d unless register s contains 0 </ul>
<br>All registers initially contain 000. The initial content of the RAM is read from standard input. The first instruction to be executed is at RAM address 0. All results are reduced modulo 1000. 
<br></div><p class="pst">Input</p><div class="ptx" lang="en-US">The input to your program consists of up to 1000 3-digit unsigned integers, representing the contents of consecutive RAM locations starting at 0. Unspecified RAM locations are initialized to 000.</div><p class="pst">Output</p><div class="ptx" lang="en-US">The output from your program is a single integer: the number of instructions executed up to and including the halt instruction. You may assume that the program does halt. </div><p class="pst">Sample Input</p><pre class="sio">299
492
495
399
492
495
399
283
279
689
078
100
000
000
000
</pre><p class="pst">Sample Output</p><pre class="sio">16
</pre><p class="pst">