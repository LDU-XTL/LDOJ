</p><div class="ptx" lang="en-US">A (formal) language is a set of strings. One way to define a particular langauge is using ordinary set notation. Alternatively, some form of grammar may be more convenient for representing large sets. The UW grammar in which we are interested has two parts: 
<br><ul><li>An initial string 
<br><li>A set of replacement rules of the form s1 -> s2 where s1 and s2 are strings </ul>
<br>The language defined by this grammar is the set of all strings that can be generated by repeatedly replacing s1 by s2 within the initial string. For example, consider the grammar G consisting of the initial string 
<br>
<br>"AyB"
<br>
<br>and the replacement rules 
<br>{"A"->"ab", "Ay"->"cdy", "B"->"w", "B"->"x"} .
<br>
<br>G generates the language 
<br>
<br>L = {"AyB", "Ayw", "Ayx", "abyB", "abyw", "abyx", "cdyB", "cdyw", "cdyx"}
<br>
<br>Given a UW grammar G, compute how many different strings there are in the language generated by G.
<br></div><p class="pst">Input</p><div class="ptx" lang="en-US">The first line of input contains the initial string. The second and subsequent lines contain the replacement rules, one per line, terminated by end-of-file. There are at most 100 replacement rules. Each input string contains between 0 and 10 upper and lower case letters, and is enclosed in quotes. There are no spaces in the input. </div><p class="pst">Output</p><div class="ptx" lang="en-US">Output consists of a single integer, the number of distinct strings in the language generated by G. If there are more than 1000 distinct strings, print "Too many." instead. </div><p class="pst">Sample Input</p><pre class="sio">"AyB"
"A"->"ab"
"Ay"->"cdy"
"B"->"w"
"B"->"x"
</pre><p class="pst">Sample Output</p><pre class="sio">9
</pre><p class="pst">