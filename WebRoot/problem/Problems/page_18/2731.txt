</p><div class="ptx" lang="en-US">The sadists who design problems for ACM programming contests often like to include the abbre-viation "ACM" somewhere in their problem descriptions. Thus, in years past, the World Finals has had problems involving "Apartment Construction Management," the "Atheneum of Culture and Movies," the "Association of Cover Manufacturers," "ACM Airlines," the "Association for Computa- tional Marinelife," and even an insect named "Amelia Cheese Mite." However, the number of word combinations beginning with A, C, and M that make sense is finite and the problem writers are starting to run out of ideas (it's hard to think of problems about "Antidisestablishmentarianistic Chthonian Metalinguistics"). Fortunately, modern culture allows more flexibility in designing abbreviations -- consider, for example:
<br>GDB -- Gnu DeBugger
<br>LINUX -- either "LINus's UniX" or "LINUs's miniX" or "Linux Is Not UniX"
<br>SNOBOL -- StriNg Oriented symBOlic Language
<br>SPITBOL -- SPeedy ImplemenTation of snoBOL
<br>The rules used in these examples seem to be:
<br><ul><li>Insignificant words (such as "of", "a", "the", etc.) are ignored.
<br><li>The letters of the abbreviation must appear, in the correct order, as an ordered sublist of the letters in the significant words of the phrase to be abbreviated.
<br><li>At least one letter of the abbreviation must come from every significant word (multiple occurrences of a letter are, of course, treated as distinct).</ul>
<br>Of course these rules are often broken in real life. For instance, RADAR is an abbreviation for "RAdio Detecting And Ranging". Under our rules (assuming that "and" is an insignificant word), this would not be a valid abbreviation (however, RADR or RADRAN or DODGING would be valid). You have been asked to take a list of insignificant words and a list of abbreviations and phrases and to determine in how many ways each abbreviation can be formed from the corresponding phrase according to the rules above.</div><p class="pst">Input</p><div class="ptx" lang="en-US">The input file consists of multiple scenarios. Each scenario begins with an integer 100 >= n >= 1 followed by n insignificant words, all in lower case, one per line with no extra white space. (A line containing 0 indicates end of input.) Following this are one or more test cases for this scenario, one per line, followed by a line containing the phrase "LAST CASE". Each line containing a test case begins with an abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The abbreviation has length at least 1 and the phrase contains at least one significant word. No input line (including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits, however, abbreviations and phrase words may be any length.</div><p class="pst">Output</p><div class="ptx" lang="en-US">For each test case, output the abbreviation followed by either
<br>is not a valid abbreviation
<br>or
<br>can be formed in i ways
<br>where i is the number of different ways in which the letters of the abbreviation may be assigned to the letters in the phrase according to the rules above. The value of i will not exceed the range of a 32-bit signed integer.</div><p class="pst">Sample Input</p><pre class="sio">2
and
of
ACM academy of computer makers
RADAR radio detection and ranging
LAST CASE
2
a
an
APPLY an apple a day
LAST CASE
0</pre><p class="pst">Sample Output</p><pre class="sio">ACM can be formed in 2 ways
RADAR is not a valid abbreviation
APPLY can be formed in 1 ways</pre><p class="pst">